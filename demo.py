#!/usr/bin/env python3
"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è APIZap."""

import json
import subprocess
import sys
from pathlib import Path

def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print("="*60)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø APIZap - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä API")
    print("="*60)
    print()

def print_menu():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –º–µ–Ω—é –æ–ø—Ü–∏–π."""
    print("üìã –ú–ï–ù–Æ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
    print("1. üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swagger Petstore (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç)")
    print("2. üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å JSON –æ—Ç—á–µ—Ç–æ–º")
    print("3. üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("4. üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π JSON –æ—Ç—á–µ—Ç")
    print("5. ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É APIZap")
    print("6. üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
    print("0. üö™ –í—ã—Ö–æ–¥")
    print()

def run_basic_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    print("üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Swagger Petstore...")
    print("–ö–æ–º–∞–Ω–¥–∞: apizap --url https://petstore.swagger.io/v2/swagger.json")
    print("-" * 60)
    
    try:
        result = subprocess.run([
            "apizap", 
            "--url", "https://petstore.swagger.io/v2/swagger.json"
        ], capture_output=True, text=True, timeout=60)
        
        print(result.stdout)
        if result.stderr:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    except FileNotFoundError:
        print("‚ùå APIZap –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install -e .")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

def run_json_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å JSON –≤—ã–≤–æ–¥–æ–º."""
    print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å JSON –æ—Ç—á–µ—Ç–æ–º...")
    print("–ö–æ–º–∞–Ω–¥–∞: apizap --url https://petstore.swagger.io/v2/swagger.json --output json --output-file demo_results.json")
    print("-" * 60)
    
    try:
        result = subprocess.run([
            "apizap", 
            "--url", "https://petstore.swagger.io/v2/swagger.json",
            "--output", "json",
            "--output-file", "demo_results.json"
        ], capture_output=True, text=True, timeout=60)
        
        print(result.stdout)
        if result.stderr:
            print("–õ–æ–≥–∏:")
            print(result.stderr)
            
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª–æ JSON —Ñ–∞–π–ª–∞
        json_file = Path("demo_results.json")
        if json_file.exists():
            print("\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON –æ—Ç—á–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):")
            with open(json_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for i, line in enumerate(lines[:20]):
                    print(f"{i+1:2d}: {line.rstrip()}")
                if len(lines) > 20:
                    print(f"... –∏ –µ—â–µ {len(lines) - 20} —Å—Ç—Ä–æ–∫")
                    
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    except FileNotFoundError:
        print("‚ùå APIZap –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install -e .")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

def run_verbose_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    print("–ö–æ–º–∞–Ω–¥–∞: apizap --url https://petstore.swagger.io/v2/swagger.json --verbose")
    print("-" * 60)
    
    try:
        result = subprocess.run([
            "apizap", 
            "--url", "https://petstore.swagger.io/v2/swagger.json",
            "--verbose"
        ], capture_output=True, text=True, timeout=60)
        
        print(result.stdout)
        if result.stderr:
            print("–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    except FileNotFoundError:
        print("‚ùå APIZap –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install -e .")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

def show_existing_report():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON –æ—Ç—á–µ—Ç."""
    json_files = ["petstore_results.json", "demo_results.json", "demo_results_swagger_petstore.json"]
    
    for json_file in json_files:
        json_path = Path(json_file)
        if json_path.exists():
            print(f"üìÑ –ü–æ–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ JSON –æ—Ç—á–µ—Ç–∞: {json_file}")
            print("-" * 60)
            
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print("üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                summary = data.get('summary', {})
                print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary.get('total_tests', 'N/A')}")
                print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {summary.get('passed', 'N/A')} ({summary.get('success_rate', 0):.1f}%)")
                print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary.get('warnings', 'N/A')}")
                print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary.get('failed', 'N/A')}")
                print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary.get('total_time_ms', 0):.2f}ms")
                print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary.get('average_time_ms', 0):.2f}ms")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤
                print("\nüìã –ü–†–ò–ú–ï–†–´ –¢–ï–°–¢–û–í:")
                tests = data.get('tests', [])
                for i, test in enumerate(tests[:5]):
                    status_emoji = "‚úÖ" if test['status'] == 'PASS' else "‚ö†Ô∏è" if test['status'] == 'WARN' else "‚ùå"
                    print(f"  {status_emoji} {test['method']} {test['path']} ‚Üí {test['status_code']} ({test['response_time_ms']:.1f}ms)")
                
                if len(tests) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(tests) - 5} —Ç–µ—Å—Ç–æ–≤")
                    
                return
                
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("üìÑ JSON –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏—è 2).")

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É APIZap."""
    print("‚ùì –°–ø—Ä–∞–≤–∫–∞ APIZap:")
    print("-" * 60)
    
    try:
        result = subprocess.run(["apizap", "--help"], capture_output=True, text=True)
        print(result.stdout)
    except FileNotFoundError:
        print("‚ùå APIZap –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install -e .")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_project_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ."""
    print("üìñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï APIZap")
    print("="*60)
    print()
    print("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:")
    print("   APIZap - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ")
    print("   —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAPI/Swagger —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π.")
    print()
    print("‚ö° –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ OpenAPI 3.0 –∏ Swagger 2.0")
    print("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö HTTP –º–µ—Ç–æ–¥–æ–≤")
    print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (Bearer, API –∫–ª—é—á–∏)")
    print("   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏ JSON –æ—Ç—á–µ—Ç—ã")
    print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    print("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print()
    print("üì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    print("   ‚Ä¢ click >= 8.0.0 (CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)")
    print("   ‚Ä¢ requests >= 2.28.0 (HTTP –∑–∞–ø—Ä–æ—Å—ã)")
    print("   ‚Ä¢ pydantic >= 2.0.0 (–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)")
    print("   ‚Ä¢ loguru >= 0.6.0 (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
    print()
    print("üöÄ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    print("   apizap --url https://api.example.com/swagger.json")
    print("   apizap --url https://api.example.com/openapi.json --auth-type bearer --auth-token TOKEN")
    print("   apizap --url https://api.example.com/spec.json --output json --output-file results.json")
    print()
    print("üîó –†–ï–ü–û–ó–ò–¢–û–†–ò–ô: https://github.com/apizap/apizap")
    print("üìß –ü–û–î–î–ï–†–ñ–ö–ê: info@apizap.dev")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print_header()
    
    while True:
        print_menu()
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-6): ").strip()
            print()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                run_basic_test()
            elif choice == '2':
                run_json_test()
            elif choice == '3':
                run_verbose_test()
            elif choice == '4':
                show_existing_report()
            elif choice == '5':
                show_help()
            elif choice == '6':
                show_project_info()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            print("\n" + "="*60 + "\n")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main() 