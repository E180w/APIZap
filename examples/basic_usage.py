#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è APIZap."""

from apizap.parser import OpenAPIParser
from apizap.tester import APITester
from apizap.reporter import TestReporter


def example_basic_usage():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è APIZap."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ APIZap")
    
    # 1. –ü–∞—Ä—Å–∏–Ω–≥ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    parser = OpenAPIParser()
    spec = parser.parse("https://httpbin.org/spec.json")
    
    if not spec:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {spec.info.title}")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    operations = parser.get_all_operations(spec)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    tester = APITester(timeout=10)
    results = tester.test_all_endpoints(spec)
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    reporter = TestReporter()
    report = reporter.generate_text_report(results)
    
    print("\n" + "="*60)
    print("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*60)
    print(report)


def example_with_authentication():
    """–ü—Ä–∏–º–µ—Ä —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""
    print("üîê –ü—Ä–∏–º–µ—Ä —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_config = {
        'type': 'bearer',
        'token': 'your_jwt_token_here',
        'header': 'Authorization'
    }
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    parser = OpenAPIParser()
    spec = parser.parse("https://httpbin.org/spec.json")
    
    if spec:
        tester = APITester(timeout=15, auth_config=auth_config)
        results = tester.test_all_endpoints(spec)
        
        # JSON –æ—Ç—á–µ—Ç
        reporter = TestReporter()
        json_report = reporter.generate_json_report(results)
        
        print("üìÑ JSON –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print("–î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞:", len(json_report), "—Å–∏–º–≤–æ–ª–æ–≤")


def example_custom_testing():
    """–ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    print("üéØ –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = APITester(timeout=5)
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    import requests
    
    try:
        response = requests.get("https://httpbin.org/get", timeout=5)
        print(f"‚úÖ GET /get ‚Üí {response.status_code}")
        
        response = requests.get("https://httpbin.org/status/404", timeout=5)
        print(f"‚ö†Ô∏è  GET /status/404 ‚Üí {response.status_code}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def example_statistics():
    """–ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    print("üìà –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    mock_results = [
        {'status': 'PASS', 'method': 'GET', 'path': '/users', 'response_time': 120.5},
        {'status': 'PASS', 'method': 'POST', 'path': '/users', 'response_time': 245.8},
        {'status': 'WARN', 'method': 'GET', 'path': '/admin', 'response_time': 89.2},
        {'status': 'FAIL', 'method': 'DELETE', 'path': '/users/1', 'response_time': 0},
    ]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    reporter = TestReporter()
    stats = reporter.generate_summary_stats(mock_results)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {stats['passed']}")
    print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats['warnings']}")
    print(f"  –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed']}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']}%")


if __name__ == "__main__":
    print("üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è APIZap\n")
    
    try:
        example_basic_usage()
        print("\n" + "-"*60 + "\n")
        
        example_with_authentication()
        print("\n" + "-"*60 + "\n")
        
        example_custom_testing()
        print("\n" + "-"*60 + "\n")
        
        example_statistics()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {e}")
    
    print("\n‚ú® –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 