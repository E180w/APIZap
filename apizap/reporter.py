"""–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

import json
from datetime import datetime
from typing import Any, Dict, List


class TestReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API."""
    
    def generate_text_report(self, results: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        """
        if not results:
            return "ü§∑ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r['status'] == 'PASS')
        warning_tests = sum(1 for r in results if r['status'] == 'WARN')
        failed_tests = sum(1 for r in results if r['status'] == 'FAIL')
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = sum(r.get('response_time', 0) for r in results)
        avg_time = total_time / total_tests if total_tests > 0 else 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            f"üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
            f"{'='*50}",
            f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}",
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests} ({passed_tests/total_tests*100:.1f}%)",
            f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_tests} ({warning_tests/total_tests*100:.1f}%)",
            f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ({failed_tests/total_tests*100:.1f}%)",
            f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}ms",
            f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}ms",
            "",
            f"üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´",
            f"{'='*50}"
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_groups = {
            'PASS': [],
            'WARN': [],
            'FAIL': []
        }
        
        for result in results:
            status_groups[result['status']].append(result)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        status_icons = {
            'PASS': '‚úÖ',
            'WARN': '‚ö†Ô∏è',
            'FAIL': '‚ùå'
        }
        
        status_names = {
            'PASS': '–£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´',
            'WARN': '–¢–ï–°–¢–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò',
            'FAIL': '–ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´'
        }
        
        for status in ['PASS', 'WARN', 'FAIL']:
            tests = status_groups[status]
            if tests:
                report_lines.extend([
                    "",
                    f"{status_icons[status]} {status_names[status]} ({len(tests)})",
                    "-" * 40
                ])
                
                for test in tests:
                    response_time = test.get('response_time', 0)
                    status_code = test.get('status_code', 'N/A')
                    error = test.get('error', '')
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ
                    test_line = f"{test['method']} {test['path']}"
                    if status_code != 'N/A':
                        test_line += f" ‚Üí {status_code}"
                    if response_time:
                        test_line += f" ({response_time:.2f}ms)"
                    
                    report_lines.append(f"  {test_line}")
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
                    if test.get('summary'):
                        report_lines.append(f"    üìù {test['summary']}")
                    
                    # –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if error:
                        report_lines.append(f"    üí≠ {error}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    if test.get('response_size'):
                        report_lines.append(f"    üì¶ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {test['response_size']} –±–∞–π—Ç")
                    
                    report_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report_lines.extend([
            "",
            f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
            f"{'='*50}"
        ])
        
        if failed_tests > 0:
            report_lines.append("üî¥ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        
        if warning_tests > 0:
            report_lines.append("üü° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ - –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        if passed_tests == total_tests:
            report_lines.append("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if avg_time > 5000:  # 5 —Å–µ–∫—É–Ω–¥
            report_lines.append("‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        report_lines.extend([
            "",
            f"üïê –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        ])
        
        return "\n".join(report_lines)
    
    def generate_json_report(self, results: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON –æ—Ç—á–µ—Ç.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            JSON –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        if not results:
            return json.dumps({
                "summary": {
                    "total_tests": 0,
                    "passed": 0,
                    "warnings": 0,
                    "failed": 0,
                    "success_rate": 0.0,
                    "total_time_ms": 0.0,
                    "average_time_ms": 0.0
                },
                "tests": [],
                "generated_at": datetime.utcnow().isoformat()
            }, indent=2, ensure_ascii=False)
        
        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r['status'] == 'PASS')
        warning_tests = sum(1 for r in results if r['status'] == 'WARN')
        failed_tests = sum(1 for r in results if r['status'] == 'FAIL')
        total_time = sum(r.get('response_time', 0) for r in results)
        avg_time = total_time / total_tests if total_tests > 0 else 0
        success_rate = passed_tests / total_tests if total_tests > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        report = {
            "summary": {
                "total_tests": total_tests,
                "passed": passed_tests,
                "warnings": warning_tests,
                "failed": failed_tests,
                "success_rate": round(success_rate * 100, 2),
                "total_time_ms": round(total_time, 2),
                "average_time_ms": round(avg_time, 2)
            },
            "tests": []
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
        for result in results:
            test_info = {
                "operation_id": result.get('operation_id'),
                "method": result['method'],
                "path": result['path'],
                "summary": result.get('summary'),
                "status": result['status'],
                "status_code": result.get('status_code'),
                "response_time_ms": result.get('response_time'),
                "response_size_bytes": result.get('response_size', 0),
                "error": result.get('error'),
                "timestamp": result.get('timestamp')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ)
            response_headers = result.get('response_headers', {})
            if response_headers:
                key_headers = {}
                for header in ['content-type', 'content-length', 'server', 'x-ratelimit-remaining']:
                    if header in response_headers:
                        key_headers[header] = response_headers[header]
                
                if key_headers:
                    test_info['response_headers'] = key_headers
            
            report["tests"].append(test_info)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        report["metadata"] = {
            "generator": "APIZap v1.0.0",
            "generated_at": datetime.utcnow().isoformat(),
            "format_version": "1.0"
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞–º
        status_codes = {}
        for result in results:
            code = result.get('status_code')
            if code:
                status_codes[str(code)] = status_codes.get(str(code), 0) + 1
        
        if status_codes:
            report["status_code_distribution"] = status_codes
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        response_times = [r.get('response_time', 0) for r in results if r.get('response_time')]
        if response_times:
            report["response_time_stats"] = {
                "min_ms": round(min(response_times), 2),
                "max_ms": round(max(response_times), 2),
                "avg_ms": round(sum(response_times) / len(response_times), 2)
            }
        
        return json.dumps(report, indent=2, ensure_ascii=False)
    
    def generate_summary_stats(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not results:
            return {
                "total": 0,
                "passed": 0,
                "warnings": 0,
                "failed": 0,
                "success_rate": 0.0
            }
        
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r['status'] == 'PASS')
        warning_tests = sum(1 for r in results if r['status'] == 'WARN')
        failed_tests = sum(1 for r in results if r['status'] == 'FAIL')
        
        return {
            "total": total_tests,
            "passed": passed_tests,
            "warnings": warning_tests,
            "failed": failed_tests,
            "success_rate": round(passed_tests / total_tests * 100, 2) if total_tests > 0 else 0.0
        } 