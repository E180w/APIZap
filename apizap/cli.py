#!/usr/bin/env python3
"""–ì–ª–∞–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è APIZap."""

import json
import sys
from pathlib import Path
from typing import Optional

import click
from loguru import logger

from .parser import OpenAPIParser
from .tester import APITester
from .reporter import TestReporter


@click.command()
@click.option(
    '--url', '-u',
    required=True,
    help='URL OpenAPI/Swagger —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://api.example.com/swagger.json)'
)
@click.option(
    '--auth-type', '-a',
    type=click.Choice(['bearer', 'apikey', 'none']),
    default='none',
    help='–¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: bearer, apikey –∏–ª–∏ none'
)
@click.option(
    '--auth-token', '-t',
    help='Bearer —Ç–æ–∫–µ–Ω –∏–ª–∏ API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
)
@click.option(
    '--auth-header', '-h',
    default='Authorization',
    help='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è API –∫–ª—é—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Authorization)'
)
@click.option(
    '--output', '-o',
    type=click.Choice(['text', 'json']),
    default='text',
    help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: text –∏–ª–∏ json'
)
@click.option(
    '--output-file', '-f',
    help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)'
)
@click.option(
    '--timeout', '-to',
    default=30,
    help='–¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)'
)
@click.option(
    '--verbose', '-v',
    is_flag=True,
    help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π'
)
@click.version_option(version='1.0.0', prog_name='APIZap')
def main(
    url: str,
    auth_type: str,
    auth_token: Optional[str],
    auth_header: str,
    output: str,
    output_file: Optional[str],
    timeout: int,
    verbose: bool
):
    """APIZap - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è API.
    
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
    —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API.
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
        apizap --url https://petstore.swagger.io/v2/swagger.json
        
        apizap --url https://api.example.com/openapi.json --auth-type bearer --auth-token your_token
        
        apizap --url https://api.example.com/swagger.json --output json --output-file results.json
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if verbose:
        logger.add(sys.stderr, level="DEBUG")
    else:
        logger.add(sys.stderr, level="INFO")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if auth_type != 'none' and not auth_token:
            click.echo("‚ùå –û—à–∏–±–∫–∞: –î–ª—è —Ç–∏–ø–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ '{}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é --auth-token".format(auth_type), err=True)
            sys.exit(1)
        
        click.echo("üöÄ –ó–∞–ø—É—Å–∫ APIZap...")
        click.echo(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {url}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        parser = OpenAPIParser()
        spec = parser.parse(url)
        
        if not spec:
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", err=True)
            sys.exit(1)
        
        click.echo(f"‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {spec.info.title} v{spec.info.version}")
        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(spec.paths)}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_config = None
        if auth_type != 'none' and auth_token:
            auth_config = {
                'type': auth_type,
                'token': auth_token,
                'header': auth_header
            }
            click.echo(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {auth_type}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        click.echo("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
        tester = APITester(timeout=timeout, auth_config=auth_config)
        results = tester.test_all_endpoints(spec)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        reporter = TestReporter()
        if output == 'json':
            report = reporter.generate_json_report(results)
        else:
            report = reporter.generate_text_report(results)
        
        # –í—ã–≤–æ–¥ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if output_file:
            output_path = Path(output_file)
            output_path.write_text(report, encoding='utf-8')
            click.echo(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path.absolute()}")
        else:
            click.echo("\n" + "="*60)
            click.echo("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            click.echo("="*60)
            click.echo(report)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r['status'] == 'PASS')
        failed_tests = total_tests - passed_tests
        
        click.echo(f"\nüìà –ò—Ç–æ–≥–æ: {total_tests} —Ç–µ—Å—Ç–æ–≤, {passed_tests} —É—Å–ø–µ—à–Ω—ã—Ö, {failed_tests} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
        
        if failed_tests > 0:
            sys.exit(1)
    
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", err=True)
        sys.exit(1)
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        click.echo(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", err=True)
        sys.exit(1)


if __name__ == '__main__':
    main() 